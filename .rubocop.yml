# Aqui na Campus Code trabalhamos bastante com projetos Rails, então fazemos uso
# da gem rubocop-rails
require:
  - rubocop-rails

# Mude para a versão de Ruby a ser utilizada e inclua aqui outros arquivos que
# você considera importante que o RuboCop não execute como: node_modules, etc..
AllCops:
  TargetRubyVersion: 2.7.8
  Exclude:
    - 'app/admin/**/*'
    - 'bin/**/*'
    - 'vendor/**/*'
    - 'db/**/*'
    - 'lib/tasks/**/*'
    - 'config/**/*'
    - 'spec/rails_helper.rb'
    - 'spec/spec_helper.rb'
# Trabalhamos bastante com testes como a documentação viva do projeto então
# desabilitamos a Cop de documentação com comentário
Documentation:
  Enabled: false

# Esta é uma Cop polêmica, pois pode ajudar na performance. Isso se tornará
# padrão no Ruby 3, mas deixamos a seu critério. Caso deseje manter esta Cop,
# basta remover estas linhas
Style/FrozenStringLiteralComment:
  Enabled: false

Lint/MissingSuper:
  Enabled: false

# Escrevemos mais linhas em arquivos de teste do que em arquivos de
# código, então é importante poder ter esses arquivos do tamanho necessário
Metrics/BlockLength:
  ExcludedMethods: ['describe', 'context', 'feature', 'scenario', 'let', 'register', 'path']

# Costumamos usar o padrão do RuboCop, mas caso queira alterar o tamanho de
# caracteres de uma linha, você pode fazê-lo aqui
Metrics/LineLength:
  Max: 80

Metrics/MethodLength:
  Max: 20

# Esta é outra Cop polêmica, mas algumas vezes queremos fazer comentários de
# TODO ou outros tipos usando acentos e caracteres não ascii, por isso, é
# preciso desabilitar a Cop
AsciiComments:
  Enabled: false